import cv2
import numpy as np
from scipy import stats

cap = cv2.VideoCapture('kb.mp4')

fps = cap.get(cv2.CAP_PROP_FPS)

ret, old_frame = cap.read()
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Parameters for motion vectors
step_size = 16
scale = 10

# Farneback optical flow params
parameters = {
    'pyr_scale': 0.5,
    'levels': 3,
    'winsize': 15,
    'iterations': 3,
    'poly_n': 5,
    'poly_sigma': 1.2
}

# Threshold for filtering out unreliable results
magnitude_threshold_bottom = 2.0
magnitude_threshold_top = 10.0

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) # grayscale

    flow = cv2.calcOpticalFlowFarneback(old_gray, frame_gray, None, **parameters, 0)

    for y in range(0, flow.shape[0], step_size):
        for x in range(0, flow.shape[1], step_size):
            fx, fy = flow[y, x]
            magnitude = np.hypot(fx, fy)
            direction = np.arctan2(fy, fx) * (180 / np.pi) 
            
            if (magnitude > magnitude_threshold_bottom and magnitude < magnitude_threshold_top):
                cv2.line(frame, (x, y), (int(x + fx * scale), int(y + fy * scale)), (0, 255, 0), 1)
                cv2.circle(frame, (x, y), 1, (0, 255, 0), -1)

    cv2.imshow('frame', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

    # Update old frame/points
    old_gray = frame_gray.copy()

cap.release()
cv2.destroyAllWindows()
